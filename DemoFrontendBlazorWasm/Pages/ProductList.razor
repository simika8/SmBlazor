@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components.Rendering
@using SmBlazor
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<Grid @ref="Grid" Settings=@Settings>
    <div type="AlignCenterDiv">
        <label for="OnlyStocks">Only products with stock</label>
        <input type="checkbox" id="OnlyStocks" @bind-value="OnlyStocks"/>
        <button @onclick="SetupClick" class="oi oi-cog"></button>
    </div>
</Grid>

<Modal @ref="Modal">
    <div type="AlignCenterDiv">
        <textarea @bind="SettingsJson"/>

        <button @onclick="SetupOk">Ok</button>
        <button @onclick="SetupCancel">Cancel</button>
    </div>
</Modal>


@code {
    public Modal Modal{ get; set; }

    [Parameter]
    public bool OnlyStocks { 
        get => Settings.ExtraParams.TryGetValue("OnlyStocks2", out var str) ? bool.Parse(str) : false; 
        set => Settings.ExtraParams["OnlyStocks"] = value.ToString(); 
    }

    public string SettingsJson { get; set; } = string.Empty;


    private Grid? Grid { get; set; }

    public void SetupClick()
    {
        SettingsJson = System.Text.Json.JsonSerializer.Serialize(Settings, Common.smJso);
        Modal.ShowModal();
    }

    private void SetupOk()
    {
        Settings = System.Text.Json.JsonSerializer.Deserialize<SmGridSettings>(SettingsJson, Common.smJso);
        Modal.Close();
    }

    private void SetupCancel()
    {
        Modal.Close();
    }


    private SmGridSettings Settings { get; set; } = new SmGridSettings()
    {
        Name = "Products",
        Height = 300,
        StyleSettings = StyleSettingsHelper.GetDefaultStyleSettings(),
        DataSourceSettings = new()
        {
            DataSourceApiBaseUri = "https://smdemobackend.azurewebsites.net",
            DataSourceApiPathUri = "/api/Product",
            DataSourceApiNameUri = "Search",
        },
        Columns = new()
        {
            new() { FieldName = "Id", PropertyTypeName = "Guid", Width = 150, },
            new() { FieldName = "Code", PropertyTypeName = "string", Width = 60, },
            new() { FieldName = "Name", PropertyTypeName = "string", Width = 170, Title = "Név", },
            new() { FieldName = "Active", PropertyTypeName = "bool", Width = 20, Title = "Aktív", },
            new() { FieldName = "Price", PropertyTypeName = "double", Width = 40, RightAligned = true, },
            new() { FieldName = "Rating", PropertyTypeName = "int", Width = 20},
            new() { FieldName = "StockSumQuantity", PropertyTypeName = "double", Width = 20, Title = "Stock", RightAligned = true, },
            new() { FieldName = "ReleaseDate", PropertyTypeName = "DateTime", Width = 90, },
            new() { FieldName = "Type", PropertyTypeName = "DemoModels.ProductType", Width = 40, },
            new() { FieldName = "Description", PropertyTypeName = "Description", Width = 60, },
        },
        ExtraParams = new()
    };

    public override bool Equals(object obj)
    {
        return obj is ProductList list &&
               OnlyStocks == list.OnlyStocks;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
    }

}
