@using System.Text.Json.Serialization
@using SmBlazor
@inject HttpClient Http

<Grid @ref="Grid" Settings=@Settings/>

<Button Color="Color.Primary" Clicked="@ShowModal">Setup</Button>
<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Employee edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Settings</FieldLabel>
                
                <MemoEdit @bind-Text="@SettingsJson" Rows="30"/>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@Ok">Ok</Button>
            <Button Color="Color.Secondary" Clicked="@Cancel">Cancel</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal modalRef;

    private Task ShowModal()
    {
        SettingsJson = System.Text.Json.JsonSerializer.Serialize(Settings, new System.Text.Json.JsonSerializerOptions() { WriteIndented = true, Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping} );
        return modalRef.Show();
    }

    private Task Ok()
    {
        Settings = System.Text.Json.JsonSerializer.Deserialize<SmGridSettings>(SettingsJson);
        return modalRef.Hide();
    }

    private Task Cancel()
    {
        return modalRef.Hide();
    }

    protected override async Task OnParametersSetAsync()
    {
        ;
    }

    public string SettingsJson { get; set; } = string.Empty;


    private Grid? Grid { get; set; }
    private SmGridSettings Settings { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Settings = await Http.GetFromJsonAsync<SmGridSettings>("sample-data/Settings.json");
    }


}
