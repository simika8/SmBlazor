@using System.Text.Json.Serialization
@using SmBlazor

<div>
    <textarea @bind="SettingsJson" @bind:event="oninput" />
</div>

<Grid @ref="Grid" Settings=@Settings/>

@code {
    public string SettingsJson { get; set; } = string.Empty;


    private Grid? Grid { get; set; }
    private Settings Settings { get; set; } = new Settings()
        {
            /*DataSourceSettings = new()
            {
                DataSourceType = DataSourceType.Odata,
                //DataSourceApiBaseUri = "https://smdemobackend.azurewebsites.net",
                DataSourceApiBaseUri = "https://localhost:7157",
                DataSourceApiPathUri = "/odata",
                DataSourceApiNameUri = "Product",
                DataSourceOdataExpand = new List<string>() { "Ext", "Stocks" },
            },/**/
            DataSourceSettings = new()
            {
                DataSourceType = DataSourceType.SmQueryOptions,
                DataSourceApiBaseUri = "https://smdemobackend.azurewebsites.net",
                //DataSourceApiBaseUri = "https://localhost:7157",
                DataSourceApiPathUri = "/api",
                DataSourceApiNameUri = "SmProduct",
            },/**/
        };

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(0);

        //var exmodel = DtoTypeBuilder.ExampleSmEdmModel();
        //Gd.RowType = DtoTypeBuilder.GetType(exmodel, "Product");
        //Gd.DataSource.Aaaa();

        Settings.Height = 300;
        //Gd.RowType = typeof(Models.Product);
        //Gd.RowType = typeof(SmBlazor.Product);

        //opcionális cuccok
        //Gd.ColumnInfo.Columns.Add(new Column() { FieldName = "Stocks", Width = 60, PropertyType = typeof(List<Models.InventoryStock>), Visible = false});
        Settings.Columns.Add(new Column("Ext.ProbaList", typeof(List<string>)) { Width = 60, Visible = false, });
        Settings.Columns.Add(new Column("Ext.Aa.Proba", typeof(string)) {Width = 60, Visible = false, });
        //Settings.Columns.Add(new Column("Id", typeof(Guid)) {Title = "Id", Width = 150,});
        Settings.Columns.Add(new Column("Code", typeof(string)) {Width = 60, Visible = true, });
        Settings.Columns.Add(new Column("Name", typeof(string)) {Title = "Név", Width = 170,});
        Settings.Columns.Add(new Column("Active", typeof(bool)) {Title = "Aktív", Width = 20,});
        Settings.Columns.Add(new Column("Price", typeof(double)) {Title = "Ár", Width = 40, RightAligned = false,});
        Settings.Columns.Add(new Column("Rating", typeof(int)) {Width = 20,});
        Settings.Columns.Add(new Column("ReleaseDate", typeof(DateTime)) {Width = 90,});
        Settings.Columns.Add(new Column(typeof(Models.Product), "Type") {Width = 40,});
        Settings.Columns.Add(new Column("Ext.Description", typeof(string)) {Width = 60,});
        Settings.StyleSettings = Settings.StyleSettings & (~StyleSettings.BasicScrollBar) | StyleSettings.ExtraScrollBar;

        SettingsJson = System.Text.Json.JsonSerializer.Serialize(Settings, new System.Text.Json.JsonSerializerOptions() { WriteIndented = true,} );
        //Settings.FirstTopCount = 2;
        //Gd.FlexibleWidthColumn = Gd.GetColumn("Price");
    }

}
