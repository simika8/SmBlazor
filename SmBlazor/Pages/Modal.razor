@using Microsoft.AspNetCore.Components.Web
@namespace SmBlazor
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime

<dialog @ref="_element">@ChildContent</dialog>

@code {
    private DotNetObjectReference<Modal> _this;
    private ElementReference _element;

    // Content of the dialog
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool Open { get; set; }

    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    [Parameter]
    public EventCallback<string> Close { get; set; }
    
    private Lazy<Task<IJSObjectReference>> moduleTask;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
            moduleTask = new(() => JsRuntime.InvokeAsync<IJSObjectReference>(
               "import", "./_content/SmBlazor/smJsInterop.js").AsTask());
        if (firstRender)
        {
            
            var module = await moduleTask.Value;
            await module.InvokeVoidAsync("blazorInitializeModal", _element, _this);
        }

        if (Open)
        {
            var module = await moduleTask.Value;
            await module.InvokeVoidAsync("blazorOpenModal", _element);
        }
        else
        {
            var module = await moduleTask.Value;
            await module.InvokeVoidAsync("blazorCloseModal", _element);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    public async Task OnClose(string returnValue)
    {
        if (Open == true)
        {
            Open = false;
            await OpenChanged.InvokeAsync(Open);
        }

        await Close.InvokeAsync(returnValue);
    }
}