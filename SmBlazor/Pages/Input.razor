@using Microsoft.AspNetCore.Components.Web
@namespace SmBlazor
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable


@Render(InputElementRef)

@code {
    string _value = "";
    [Parameter]
    public string Value
    {
        get { return _value; }
        set
        {
            if (_value != value)
            {
                _value = value;
                var task = SetValueFromCode(value);

                //var result = AsyncContext.RunTask(MyAsyncMethod).Result;
            }
        }
    }
    
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnChange { get; set; }

    [Parameter]
    public EventCallback<string> CursorEvent { get; set; }

    public RenderFragment<ForwardRef> Render = ref1 => __builder =>
    {
        <input id="Input" type="search" placeholder="search" autocomplete="off"
            @ref="ref1.Current"  />

    };

    public ForwardRef InputElementRef { get; set; } = new ForwardRef();
    public DotNetObjectReference<Input>? componentRef { get; set; }


    private SmBlazor.SmJsInterop? SmJsInterop { get; set; }
    public async Task<IJSObjectReference> GetJsObjectReference()
    {
        if (SmJsInterop is null)
            SmJsInterop = new SmBlazor.SmJsInterop(JsRuntime);
        return await SmJsInterop.GetJsObjectReference();
    }

    [JSInvokable("setValueFromJS")]
    public void SetValueFromJS(string newValue)
    {
        if (Value != newValue)
        {
            _value = newValue;
            ValueChanged.InvokeAsync(_value);
            OnChange.InvokeAsync(_value);
        }


        //ValueChanged.InvokeAsync(Value);
        //OnChange.InvokeAsync(Value);

        StateHasChanged();
    }

    public async Task SetValueFromCode(string newValue)
    {
        await (await GetJsObjectReference())
            .InvokeAsync<bool>("setValue", InputElementRef.Current, newValue);

        Console.WriteLine("SetValueFromCode");

    }

    [JSInvokable("keyboardEventHandlerFromJs")]
    public async Task KeyboardEventHandlerFromJs(int keycode, string code)
    {
        await CursorEvent.InvokeAsync(code);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Console.WriteLine($"{this.GetType().Name}: OnAfterRenderAsync. firstRender: {firstRender}");

        if (firstRender)
        {
            var componentRef = DotNetObjectReference.Create(this);

            await (await GetJsObjectReference())
                .InvokeVoidAsync("subscribeToChange", new object[] { componentRef, InputElementRef.Current });
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        componentRef?.Dispose();
        if (!(SmJsInterop is null))
            await SmJsInterop.DisposeAsync();
    }
    

}
