@using System.Text.Json.Serialization
@namespace SmBlazor
@using Microsoft.JSInterop
@inject IJSRuntime Js
@implements IAsyncDisposable

<div class="Grid @Settings.Name @StyleSettingsHelper.GetStyleClasses(Settings.StyleSettings)" translate="no" spellcheck="false">


    @if (Settings.StyleSettings.HasFlag(StyleSettings.GridHeight)){
        var gridHeight = Settings.Height.ToString()+"px";
        <style>.GridBodyDiv {height: @gridHeight;}</style>
    }
    @if (Settings.StyleSettings.HasFlag(StyleSettings.ColumnAlign) || Settings.StyleSettings.HasFlag(StyleSettings.ColumnWidth)){
        for (int i = 0; i < Settings.Columns.VisibleColumns().Count; i++)
        {
            var col = Settings.Columns.VisibleColumns()[i];
            var nthchild = i + 1;
            var colWidth = Settings.StyleSettings.HasFlag(StyleSettings.ColumnWidth)? col.Width.ToString()+"px;":null;
            var textAlign = col.RightAligned ? "right" : null;
            <style> th:nth-child(@nthchild), td:nth-child(@nthchild) { text-align: @textAlign; width: @colWidth} </style>
        }
    }
    <div class="GridToolbarDiv">
        <div class="InputDiv">
            <div class="Icon oi oi-magnifying-glass"/>
            <Input @ref="Input" @bind-Value=@Settings.Search CursorEvent=@CursorEvent OnChange=@SearchChanged />
        </div>
        @ChildContent
    </div>
    <div class="GridHeadDiv">
        <table>

            <thead>
                <tr>

                    @foreach (var col in Settings.Columns.VisibleColumns())
                    {
                        <th>
                            <div>
                                @col.Title
                            </div>
                        </th>
                    }

                </tr>
            </thead>
        </table>
    </div>
    <div class="GridBodyDiv" @ref="GridBodyDivRef" >
        <table @ref="GridTableRef">
            <tbody>
                @{
                    if (GridData.Rows == null)
                    {
                            <p><em>Loading...</em></p>
                    }
                    else
                    {
                        @foreach (var row in GridData.Rows)
                        {
                            var rowIsCursorSelected = row.Index == State.Cursor;
                            var idx = row.Index.ToString();
                            <GridRow @ref=GridRows[idx] Row=row.Row RowIsCursorSelected="rowIsCursorSelected" Columns="Settings.Columns" RowClick="RowClick" />
                        }
                    }
                }
            </tbody>
        </table>
    </div>

    <div id="Loaded"></div>
</div>


@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [EditorRequired]
    [Parameter]
    public SmGridSettings Settings { get; set; } = null!;


    private SmGridState State { get; set; } = new();

    public GridData GridData { get; set; } = new GridData();

    public Dictionary<string, Input?> FilterInputs { get; set; } = new Dictionary<string, Input?>(StringComparer.OrdinalIgnoreCase);
    public ElementReference? GridBodyDivRef { get; set; }
    public ElementReference? GridDivRef { get; set; }
    public ElementReference? GridTableRef { get; set; }

    private Input? Input { get; set; }
    public Dictionary<string, GridRow?> GridRows { get; set; } = new Dictionary<string, GridRow?>(StringComparer.OrdinalIgnoreCase);
    private int? _rowHeight = null;

    public int _gridBodyDivHeight = 0;
    public int _gridTableHeight = 0;

    private SmBlazor.SmJsInterop? _smJsInterop { get; set; }
    public async Task<IJSObjectReference> GetJsObjectReference()
    {
        var smJsInterop = GetSmJsInterop();
        return await smJsInterop.GetJsObjectReference();
    }
    public SmBlazor.SmJsInterop GetSmJsInterop()
    {
        if (_smJsInterop is null)
            _smJsInterop = new SmBlazor.SmJsInterop(Js);
        return _smJsInterop;
    }


    public async Task ScrollToCursor()
    {
        //await using var SmJsInterop = new SmJsInterop(Js);
        if (State.Cursor > -1)
        {
            try
            {
                var curEl = GridRows.TryGetValue(State.Cursor.ToString(), out var val) ? val?.TrElement : null;
                await (await GetJsObjectReference())
                    .InvokeAsync<bool>("scrollToElement", curEl);
                //await SmJsInterop.ScrollToElement(curEl);
                //var sct = await SmJsInterop.GetScrollTop(GridBodyDivRef);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }

    private async Task SearchChanged(string value)
    {
        await ReQuery();
    }
    private async Task CursorEvent(string value)
    {
        var ExampleJsInterop = GetSmJsInterop();
        //await Task.Delay(1);
        var KeyPressed = "Key Pressed is " + value;
        //var cursor = Table.GetCursor();
        var cursor = State.Cursor;
        switch (value)
        {
            case "ArrowDown":
                cursor++;
                break;
            case "ArrowUp":
                cursor--;
                break;
            case "Home":
                cursor = 0;
                break;
            case "End":
                cursor = int.MaxValue;
                break;
            case "PageUp":
                //var gr = GridRows.Select(x => x.Value?.TrElement).ToArray();
                //var heights =
                cursor = CursorPageUpDown(cursor, await GetRowHeight(GridRows, ExampleJsInterop), await ClientHeight(GridBodyDivRef), -1);
                //cursor -= 10;
                break;
            case "PageDown":
                cursor = CursorPageUpDown(cursor, await GetRowHeight(GridRows, ExampleJsInterop), await ClientHeight(GridBodyDivRef), 1);
                break;
            case "+":
                break;
        }
        int ToRange(int actvalue, int? minvalue, int? maxvalue)
        {
            return Math.Max(Math.Min(actvalue, maxvalue ?? int.MaxValue), minvalue ?? int.MinValue);
        }

        int CursorPageUpDown(int cursor, int rowHeight, int gridBodyDivHeight, int direction)
        {
            var mincursor = 0;
            var maxcursor = GridData.Rows?.Count ?? 1 - 1;

            //ha az adott irányba már nem tudok tovább mozogni, akkor visszadom a régi cursort
            if (cursor + direction != ToRange(cursor + direction, mincursor, maxcursor))
            {
                return cursor;
            }

            var nextCursor = cursor;
            nextCursor = ToRange(nextCursor, mincursor, maxcursor);
            var jumpheight = 0;
            //addig megyek, amíg az ugrási magasság több nem lesz, mint a rendelkezésre álló hely
            while (jumpheight < gridBodyDivHeight)
            {
                nextCursor += direction;
                if (nextCursor != ToRange(nextCursor, mincursor, maxcursor))
                    break;
                jumpheight += rowHeight;
            }
            //kettőt visszaugrok, hogy az ugrás csak akkora legyen, hogy az előző kurzoros sor is látszódjon
            nextCursor -= 2 * direction;
            //ha nem változott a kurzor,mert túl kicsit ugrottam volna, akkor legalább egyet ugrok
            if (cursor == nextCursor || nextCursor == 1)
                nextCursor += direction;

            nextCursor = ToRange(nextCursor, 0, GridData.Rows?.Count - 1);
            return nextCursor;
        }

        cursor = ToRange(cursor, 0, GridData.Rows?.Count - 1);

        await SetCursor(cursor);
        /*await using var ExampleJsInterop = new ExampleJsInterop(Js);
        await ExampleJsInterop.FocusToElement(Table.FilterInputs["Name"].InputElement);*/
    }
    private async Task SetCursor(int? cursor)
    {
        if (cursor == null)
            return;
        if (State.Cursor != cursor)
        {
            if (cursor >= 0)
            {
                var idx = cursor.ToString()??"";
                GridRows[idx]?.SetCursor(true);
            }

            if (State.Cursor >= 0)
            {
                var idx2 = State.Cursor.ToString() ?? "";
                GridRows[idx2]?.SetCursor(false);
            }

            State.Cursor = (int)cursor;
            await ScrollToCursor();
        }
        if (State.Cursor == GridData.Rows?.Count - 1 && State.Cursor > 0)
            await LoadMoreRecords();

    }

    /*private async Task<List<int>> GetHeights(Dictionary<string, GridRow?> gridRows, SmJsInterop exampleJsInterop)
            {
            var res = new List<int>();
            for (var i = 0; i < gridRows.Count(); i++)
            {
            if (gridRows.TryGetValue(i.ToString(), out var row))
                {
                    var gr = row?.TrElement;
                    int ch;
                    if (gr != null)
                    ch = await exampleJsInterop.ClientHeight(gr);
            else
        ch = 0;

        res.Add(ch);
        }
        }
        return res;
    }*/

    private async Task<int> GetRowHeight(Dictionary<string, GridRow?> gridRows, SmJsInterop exampleJsInterop)
    {
        if (_rowHeight != null)
        {
            return (int)_rowHeight;
        }

        if (gridRows.Count() == 0)
        {
            return 50;
        }
        var row = gridRows["0"];

        var gr = row?.TrElement;
        int ch;
        if (gr != null)
            ch = await ClientHeight(gr);
        else
            ch = 0;

        _rowHeight = ch;
        return (int)_rowHeight;
    }

    private async Task RowClick((ElementReference? elementReference, MouseEventArgs args) data)
    {
        //for (var i = 0; i < GridRows.Count())

        int? GridRowId(ElementReference? elementReference)
        {
            int? gridRowId = null;
            foreach (var gridRow in GridRows)
            {
                if (gridRow.Value != null)
                {
                    if (gridRow.Value.TrElement.Equals(elementReference))
                    {

                        gridRowId = int.TryParse(gridRow.Key, out var val) ? val : null;
                        //gridRowId = ;
                    }

                }
            }
            return gridRowId;

        }
        var ri = GridRowId(data.elementReference);
        //Console.WriteLine(ri);
        await SetCursor(ri);
        Input?.InputElementRef.Current?.FocusAsync();
        ;
    }


    public async Task ReQuery()
    {
        if (Settings == null)
            return;

        GridRows = new Dictionary<string, GridRow?>();
        GridData.Rows = null;
        State.Cursor = -1;
        _myShouldRender = true;
        StateHasChanged();

        await GridData.ReQuery(Settings);
        State.Cursor = -1;

        _myShouldRender = true;
        StateHasChanged();
    }
    public async Task LoadMoreRecords()
    {
        await GridData.LoadMoreRecords(Settings);
        _myShouldRender = true;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Settings.DataSourceSettings == null)
            return; 

        if (SettingsChanged())
            _myShouldRender = true;

        if (_myShouldRender)
            await ReQuery();
    }


    bool _myShouldRender = true;
    protected override bool ShouldRender()
    {
        if (_myShouldRender)
        {
            _myShouldRender = false;
            return true;
        }
        else
        {
            //_myShouldRender = true;
            return false;
        }
    }

    private string _oldSettingsJson;
    private bool SettingsChanged()
    {
        var actSettingsJson = System.Text.Json.JsonSerializer.Serialize(Settings, new System.Text.Json.JsonSerializerOptions() { WriteIndented = true, Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping} );
        if (actSettingsJson != _oldSettingsJson)
        {
            _oldSettingsJson = actSettingsJson;
            return true;
        }
        return false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var SmJsInterop = GetSmJsInterop();
        //Console.WriteLine(this.GetType().Name + " OnAfterRenderAsync");
        var a = Input?.InputElementRef;
        if (firstRender)
        {
            Input?.InputElementRef.Current?.FocusAsync();  

            var dotnetComponentRef = DotNetObjectReference.Create(this);

            await AddEventListenerScroll(dotnetComponentRef, GridBodyDivRef);

        }

        _gridBodyDivHeight = await ClientHeight(GridBodyDivRef);
        _gridTableHeight = await ClientHeight(GridTableRef);

    }
    public async ValueTask<bool> AddEventListenerScroll(DotNetObjectReference<Grid> dotnetComponentRef, ElementReference? htmlElementRef)
    {
        if (htmlElementRef == null)
            return false;
        var JsObjectReference = await GetJsObjectReference();
        await JsObjectReference.InvokeVoidAsync("addEventListenerScroll", new object[] { dotnetComponentRef, htmlElementRef });
        return true;
    }
    public async ValueTask<int> ClientHeight(ElementReference? element)
    {
        if (element == null)
            return 0;
        var JsObjectReference = await GetJsObjectReference();
        try
        {
            var res = await JsObjectReference.InvokeAsync<int>("clientHeight", element);
            return res;
        }
        catch
        {
            return 0;
        }
    }

    [JSInvokable("scrollEvent")]
    public async Task ScrollEvent(int scrollTop)
    {
        if (scrollTop + _gridBodyDivHeight > _gridTableHeight*0.9 - 100)
            await LoadMoreRecords();
    }

    public async ValueTask DisposeAsync()
    {
        if (!(_smJsInterop is null))
            await _smJsInterop.DisposeAsync();
    }

    
}
